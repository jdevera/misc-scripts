#!/usr/bin/env -S uv --quiet run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "click",
#     "psutil",
#     "rich",
# ]
# ///
# BRIEF: Show processes for the current user with optional filtering
# DESC: Lists all processes owned by the current user (by real or effective
# DESC: UID) with PID, CPU time, and command name. Supports pattern matching
# DESC: with case-insensitive search and highlighting.
# USAGE: pid [-n|--no-header] [-i|--case-insensitive] [--hl-color COLOR] [PATTERN]

import os
import re
from dataclasses import dataclass
from typing import Generator

import click
import psutil
from rich.console import Console
from rich.table import Table
from rich.text import Text


@dataclass(frozen=True)
class ProcessRow:
    """Data class representing a process row for display."""

    pid: int  # Process ID
    time_str: str  # Formatted CPU time (user + system)
    name: Text  # Process name with optional highlighting


def get_user_processes() -> Generator[psutil.Process, None, None]:
    """Get all processes owned by the current user.
    
    This function handles all potential psutil exceptions upfront and only yields
    processes that are safe to access. Consumers of this generator can safely
    access proc.info without additional exception handling.
    
    Shows processes where either the real user OR effective user matches current user.
    """
    current_uid = os.getuid()
    for proc in psutil.process_iter(["pid", "name", "cpu_times", "uids"]):
        try:
            # Access all required fields to trigger any exceptions upfront
            proc_info = proc.info
            uids = proc_info["uids"]
            if uids.real == current_uid or uids.effective == current_uid:
                yield proc
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess, KeyError):
            continue


def filter_processes(
    processes: Generator[psutil.Process, None, None], 
    pattern: str | None, 
    case_insensitive: bool
) -> Generator[psutil.Process, None, None]:
    """Filter processes by name pattern."""
    if not pattern:
        yield from processes
        return
    if case_insensitive:
        yield from (p for p in processes if pattern.lower() in p.info["name"].lower())
    else:
        yield from (p for p in processes if pattern in p.info["name"])


def highlight_name(name: str, pattern: str | None, case_insensitive: bool, hl_color: str) -> str | Text:
    """Highlight a process name with the given pattern and color."""
    if not pattern:
        return name

    # Determine flags once
    flags = re.IGNORECASE if case_insensitive else 0

    highlighted_name = re.sub(
        f"({re.escape(pattern)})", f"[{hl_color}]\\1[/{hl_color}]", name, flags=flags
    )
    return Text.from_markup(highlighted_name)


def format_processes(
    processes: Generator[psutil.Process, None, None], 
    pattern: str | None, 
    case_insensitive: bool, 
    hl_color: str
) -> Generator[ProcessRow, None, None]:
    """Format processes into ProcessRow objects with calculated fields and highlighting."""
    for proc in processes:
        pid = proc.info["pid"]
        name = proc.info["name"]
        cpu_times = proc.info["cpu_times"]

        # Format CPU time (user + system time)
        if cpu_times:
            total_time = cpu_times.user + cpu_times.system
            time_str = f"{total_time:.2f}"
        else:
            time_str = "0.00"

        # Highlight the name if pattern is provided
        highlighted_name = highlight_name(name, pattern, case_insensitive, hl_color)

        yield ProcessRow(pid=pid, time_str=time_str, name=highlighted_name)


@click.command()
@click.option("-n", "--no-header", is_flag=True, help="Does not show the ps header")
@click.option(
    "-i", "--case-insensitive", is_flag=True, help="Case insensitive pattern matching"
)
@click.option(
    "--hl-color",
    default="red",
    envvar="PID_HL_COLOR",
    help="Color for highlighting matches (e.g., red, blue, green)",
)
@click.argument("pattern", required=False)
def main(
    no_header: bool, case_insensitive: bool, hl_color: str, pattern: str | None
) -> None:
    """Show all processes associated with the current user that match certain name criteria.

    Shows processes where either the real user or effective user matches the current user.
    This includes regular processes you started and processes running with elevated privileges.

    PATTERN: A pattern to match the process names. If no pattern
             is specified, all associated processes are shown.
    """
    # Initialize rich console with proper color detection
    console = Console()

    # Generator pipeline: user_processes -> filter -> format
    user_processes = get_user_processes()

    # Filter processes by pattern if provided
    filtered_processes = filter_processes(user_processes, pattern, case_insensitive)

    # Format processes into ProcessRow objects (highlighting happens here)
    process_rows = format_processes(
        filtered_processes, pattern, case_insensitive, hl_color
    )

    # Create table (with or without header based on no_header flag)
    table = Table(show_header=not no_header, header_style="bold", box=None)
    table.add_column("PID", justify="right", style="cyan")
    table.add_column("TIME", justify="right", style="magenta")
    table.add_column("COMMAND", style="white")

    # Add processes to table
    for row in process_rows:
        table.add_row(str(row.pid), row.time_str, row.name)

    console.print(table)


if __name__ == "__main__":
    main()
