#!/usr/bin/env python

import commands
import sys
import os


FLAG_ATTACH = "-r"
FLAG_JOIN   = "-x"
FLAG_CREATE = "-S"


def select_elems(a_list, elems):
    """
    Non consecutive slicing.
    """
    return [a_list[li] for li in elems]


def get_screen_list():
    """
    Run the screen command and get a list of available screens.

    Every list element is a tuple of the form:
        ("screen name", "Screen status")
    Screen status can be either (Attached) or (Detached)
    """
    screen_list_cmd = "screen -ls"

    # Filter the output, only Attached or Detached screens
    filter_screens = lambda x: ("(Attached)" in x or "(Detached)" in x)
    screens = filter(filter_screens,
                     commands.getoutput(screen_list_cmd).splitlines())

    # Get only screen name and status
    screen_list = [select_elems(line.strip().split(), (0, -1)) 
                   for line in  screens]
    
    return screen_list


def show_screen_menu(screen_list):
    """
    Print all screen names in the list with a different number each.
    """
    if len(screen_list) == 0:
        print "No screens found"
        print
    screen_list.append(["New screen", ""])
    for (num, screen) in enumerate(screen_list):
        print "%2d) %20s %12s" % (num + 1, screen[0], screen[1])

        
def get_user_numeric_option(prompt, minopt, maxopt):
    """
    Get a number from the user in a given range.

    Return -1 if the input is not a number or if it out of range.
    """
    try:
        numopt = int(raw_input(prompt))
        if numopt < minopt or numopt > maxopt:
            numopt = -1
    except:
        numopt = -1

    return numopt



def validate_option(opt, invalid, errmsg):
    """
    Check that the option is in the list of valid options.
    """
    if opt in invalid:
        print errmsg
        return False
    return True


def main():
    screen_list = get_screen_list()
    screen_count = len(screen_list)

    if screen_count > 0:
        # there is something to choose from
        show_screen_menu(screen_list[:])
        try:
            opt = get_user_numeric_option("Screen # --> ", 1, screen_count + 1)
        except KeyboardInterrupt:
            print
            return 1
        if not validate_option(opt, [-1], "No valid screen selected"):
            return 1
    else:
        print "No screens found, will create one."
        print
        opt = 1 # This forces the creation of a new screen
    
    # New screen
    if opt == screen_count + 1:
        try:
            screen_name = raw_input("New screen name --> ")
        except KeyboardInterrupt:
            print
            return 1
        modif = FLAG_CREATE
        validate_option(screen_name, [""], "Invalid screen name")
    # Existing screen
    else:
        screen = screen_list[opt - 1]
        screen_name = screen[0]
    
        if "Attached" in screen[1]:
            modif = FLAG_JOIN
        elif "Detached" in screen[1]:
            modif = FLAG_ATTACH
        else:
            print "Don't know what to do with a screen in %s state" % (
                  screen[1])
            return 1

    os.execlp("screen", "screen", modif, screen_name)


if __name__ == "__main__":
    sys.exit(main())
